// Code generated by ent, DO NOT EDIT.

package ticket

import (
	"TinyCRM/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldTitle, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldContent, v))
}

// TicketFileID applies equality check predicate on the "ticket_file_id" field. It's identical to TicketFileIDEQ.
func TicketFileID(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldTicketFileID, v))
}

// IsViewed applies equality check predicate on the "is_viewed" field. It's identical to IsViewedEQ.
func IsViewed(v bool) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldIsViewed, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldCreatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldTitle, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldContent, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldStatus, vs...))
}

// TicketFileIDEQ applies the EQ predicate on the "ticket_file_id" field.
func TicketFileIDEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldTicketFileID, v))
}

// TicketFileIDNEQ applies the NEQ predicate on the "ticket_file_id" field.
func TicketFileIDNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldTicketFileID, v))
}

// TicketFileIDIn applies the In predicate on the "ticket_file_id" field.
func TicketFileIDIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldTicketFileID, vs...))
}

// TicketFileIDNotIn applies the NotIn predicate on the "ticket_file_id" field.
func TicketFileIDNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldTicketFileID, vs...))
}

// TicketFileIDGT applies the GT predicate on the "ticket_file_id" field.
func TicketFileIDGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldTicketFileID, v))
}

// TicketFileIDGTE applies the GTE predicate on the "ticket_file_id" field.
func TicketFileIDGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldTicketFileID, v))
}

// TicketFileIDLT applies the LT predicate on the "ticket_file_id" field.
func TicketFileIDLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldTicketFileID, v))
}

// TicketFileIDLTE applies the LTE predicate on the "ticket_file_id" field.
func TicketFileIDLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldTicketFileID, v))
}

// TicketFileIDContains applies the Contains predicate on the "ticket_file_id" field.
func TicketFileIDContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldTicketFileID, v))
}

// TicketFileIDHasPrefix applies the HasPrefix predicate on the "ticket_file_id" field.
func TicketFileIDHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldTicketFileID, v))
}

// TicketFileIDHasSuffix applies the HasSuffix predicate on the "ticket_file_id" field.
func TicketFileIDHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldTicketFileID, v))
}

// TicketFileIDEqualFold applies the EqualFold predicate on the "ticket_file_id" field.
func TicketFileIDEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldTicketFileID, v))
}

// TicketFileIDContainsFold applies the ContainsFold predicate on the "ticket_file_id" field.
func TicketFileIDContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldTicketFileID, v))
}

// IsViewedEQ applies the EQ predicate on the "is_viewed" field.
func IsViewedEQ(v bool) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldIsViewed, v))
}

// IsViewedNEQ applies the NEQ predicate on the "is_viewed" field.
func IsViewedNEQ(v bool) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldIsViewed, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldCreatedAt, v))
}

// HasCustomerID applies the HasEdge predicate on the "customer_id" edge.
func HasCustomerID() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerIDTable, CustomerIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerIDWith applies the HasEdge predicate on the "customer_id" edge with a given conditions (other predicates).
func HasCustomerIDWith(preds ...predicate.Customer) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := newCustomerIDStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExpertID applies the HasEdge predicate on the "expert_id" edge.
func HasExpertID() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExpertIDTable, ExpertIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExpertIDWith applies the HasEdge predicate on the "expert_id" edge with a given conditions (other predicates).
func HasExpertIDWith(preds ...predicate.Expert) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := newExpertIDStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDepartmentID applies the HasEdge predicate on the "department_id" edge.
func HasDepartmentID() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DepartmentIDTable, DepartmentIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepartmentIDWith applies the HasEdge predicate on the "department_id" edge with a given conditions (other predicates).
func HasDepartmentIDWith(preds ...predicate.Department) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := newDepartmentIDStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(sql.NotPredicates(p))
}
