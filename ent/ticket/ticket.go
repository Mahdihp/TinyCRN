// Code generated by ent, DO NOT EDIT.

package ticket

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ticket type in the database.
	Label = "ticket"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTicketFileID holds the string denoting the ticket_file_id field in the database.
	FieldTicketFileID = "ticket_file_id"
	// FieldIsViewed holds the string denoting the is_viewed field in the database.
	FieldIsViewed = "is_viewed"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeCustomerID holds the string denoting the customer_id edge name in mutations.
	EdgeCustomerID = "customer_id"
	// EdgeExpertID holds the string denoting the expert_id edge name in mutations.
	EdgeExpertID = "expert_id"
	// EdgeDepartmentID holds the string denoting the department_id edge name in mutations.
	EdgeDepartmentID = "department_id"
	// Table holds the table name of the ticket in the database.
	Table = "tickets"
	// CustomerIDTable is the table that holds the customer_id relation/edge.
	CustomerIDTable = "tickets"
	// CustomerIDInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerIDInverseTable = "customers"
	// CustomerIDColumn is the table column denoting the customer_id relation/edge.
	CustomerIDColumn = "customer_tickets"
	// ExpertIDTable is the table that holds the expert_id relation/edge.
	ExpertIDTable = "tickets"
	// ExpertIDInverseTable is the table name for the Expert entity.
	// It exists in this package in order to avoid circular dependency with the "expert" package.
	ExpertIDInverseTable = "experts"
	// ExpertIDColumn is the table column denoting the expert_id relation/edge.
	ExpertIDColumn = "expert_tickets"
	// DepartmentIDTable is the table that holds the department_id relation/edge.
	DepartmentIDTable = "tickets"
	// DepartmentIDInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentIDInverseTable = "departments"
	// DepartmentIDColumn is the table column denoting the department_id relation/edge.
	DepartmentIDColumn = "department_tickets"
)

// Columns holds all SQL columns for ticket fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldContent,
	FieldStatus,
	FieldTicketFileID,
	FieldIsViewed,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tickets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"customer_tickets",
	"department_tickets",
	"expert_tickets",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultIsViewed holds the default value on creation for the "is_viewed" field.
	DefaultIsViewed bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusUnknown    Status = "Unknown"
	StatusPending    Status = "Pending"
	StatusReferenced Status = "Referenced"
	StatusAnswered   Status = "Answered"
	StatusClosed     Status = "Closed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusUnknown, StatusPending, StatusReferenced, StatusAnswered, StatusClosed:
		return nil
	default:
		return fmt.Errorf("ticket: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Ticket queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTicketFileID orders the results by the ticket_file_id field.
func ByTicketFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTicketFileID, opts...).ToFunc()
}

// ByIsViewed orders the results by the is_viewed field.
func ByIsViewed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsViewed, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCustomerIDField orders the results by customer_id field.
func ByCustomerIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerIDStep(), sql.OrderByField(field, opts...))
	}
}

// ByExpertIDField orders the results by expert_id field.
func ByExpertIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExpertIDStep(), sql.OrderByField(field, opts...))
	}
}

// ByDepartmentIDField orders the results by department_id field.
func ByDepartmentIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepartmentIDStep(), sql.OrderByField(field, opts...))
	}
}
func newCustomerIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerIDTable, CustomerIDColumn),
	)
}
func newExpertIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExpertIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExpertIDTable, ExpertIDColumn),
	)
}
func newDepartmentIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepartmentIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DepartmentIDTable, DepartmentIDColumn),
	)
}
