// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CustomersColumns holds the columns for the "customers" table.
	CustomersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true, Size: 20},
		{Name: "first_name", Type: field.TypeString, Size: 50},
		{Name: "last_name", Type: field.TypeString, Size: 50},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp(6)"}},
	}
	// CustomersTable holds the schema information for the "customers" table.
	CustomersTable = &schema.Table{
		Name:       "customers",
		Columns:    CustomersColumns,
		PrimaryKey: []*schema.Column{CustomersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "customer_id",
				Unique:  true,
				Columns: []*schema.Column{CustomersColumns[0]},
			},
		},
	}
	// DepartmentsColumns holds the columns for the "departments" table.
	DepartmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 50},
	}
	// DepartmentsTable holds the schema information for the "departments" table.
	DepartmentsTable = &schema.Table{
		Name:       "departments",
		Columns:    DepartmentsColumns,
		PrimaryKey: []*schema.Column{DepartmentsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "department_id",
				Unique:  true,
				Columns: []*schema.Column{DepartmentsColumns[0]},
			},
		},
	}
	// ExpertsColumns holds the columns for the "experts" table.
	ExpertsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true, Size: 20},
		{Name: "first_name", Type: field.TypeString, Size: 50},
		{Name: "last_name", Type: field.TypeString, Size: 50},
		{Name: "start_time", Type: field.TypeTime},
		{Name: "end_time", Type: field.TypeTime},
		{Name: "is_online", Type: field.TypeBool},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp(6)"}},
	}
	// ExpertsTable holds the schema information for the "experts" table.
	ExpertsTable = &schema.Table{
		Name:       "experts",
		Columns:    ExpertsColumns,
		PrimaryKey: []*schema.Column{ExpertsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "expert_id",
				Unique:  true,
				Columns: []*schema.Column{ExpertsColumns[0]},
			},
		},
	}
	// TicketsColumns holds the columns for the "tickets" table.
	TicketsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "title", Type: field.TypeString, Size: 50},
		{Name: "content", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Unknown", "Pending", "Referenced", "Answered", "Closed"}},
		{Name: "ticket_file_id", Type: field.TypeString},
		{Name: "is_viewed", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp(6)"}},
		{Name: "customer_tickets", Type: field.TypeInt64},
		{Name: "department_tickets", Type: field.TypeInt},
		{Name: "expert_tickets", Type: field.TypeInt},
	}
	// TicketsTable holds the schema information for the "tickets" table.
	TicketsTable = &schema.Table{
		Name:       "tickets",
		Columns:    TicketsColumns,
		PrimaryKey: []*schema.Column{TicketsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tickets_customers_tickets",
				Columns:    []*schema.Column{TicketsColumns[7]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "tickets_departments_tickets",
				Columns:    []*schema.Column{TicketsColumns[8]},
				RefColumns: []*schema.Column{DepartmentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "tickets_experts_tickets",
				Columns:    []*schema.Column{TicketsColumns[9]},
				RefColumns: []*schema.Column{ExpertsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "ticket_id",
				Unique:  true,
				Columns: []*schema.Column{TicketsColumns[0]},
			},
		},
	}
	// DepartmentExpertsColumns holds the columns for the "department_experts" table.
	DepartmentExpertsColumns = []*schema.Column{
		{Name: "department_id", Type: field.TypeInt},
		{Name: "expert_id", Type: field.TypeInt},
	}
	// DepartmentExpertsTable holds the schema information for the "department_experts" table.
	DepartmentExpertsTable = &schema.Table{
		Name:       "department_experts",
		Columns:    DepartmentExpertsColumns,
		PrimaryKey: []*schema.Column{DepartmentExpertsColumns[0], DepartmentExpertsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "department_experts_department_id",
				Columns:    []*schema.Column{DepartmentExpertsColumns[0]},
				RefColumns: []*schema.Column{DepartmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "department_experts_expert_id",
				Columns:    []*schema.Column{DepartmentExpertsColumns[1]},
				RefColumns: []*schema.Column{ExpertsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CustomersTable,
		DepartmentsTable,
		ExpertsTable,
		TicketsTable,
		DepartmentExpertsTable,
	}
)

func init() {
	TicketsTable.ForeignKeys[0].RefTable = CustomersTable
	TicketsTable.ForeignKeys[1].RefTable = DepartmentsTable
	TicketsTable.ForeignKeys[2].RefTable = ExpertsTable
	DepartmentExpertsTable.ForeignKeys[0].RefTable = DepartmentsTable
	DepartmentExpertsTable.ForeignKeys[1].RefTable = ExpertsTable
}
