// Code generated by ent, DO NOT EDIT.

package ent

import (
	"TinyCRM/ent/department"
	"TinyCRM/ent/expert"
	"TinyCRM/ent/ticket"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExpertCreate is the builder for creating a Expert entity.
type ExpertCreate struct {
	config
	mutation *ExpertMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (ec *ExpertCreate) SetUsername(s string) *ExpertCreate {
	ec.mutation.SetUsername(s)
	return ec
}

// SetFirstName sets the "first_name" field.
func (ec *ExpertCreate) SetFirstName(s string) *ExpertCreate {
	ec.mutation.SetFirstName(s)
	return ec
}

// SetLastName sets the "last_name" field.
func (ec *ExpertCreate) SetLastName(s string) *ExpertCreate {
	ec.mutation.SetLastName(s)
	return ec
}

// SetStartTime sets the "start_time" field.
func (ec *ExpertCreate) SetStartTime(t time.Time) *ExpertCreate {
	ec.mutation.SetStartTime(t)
	return ec
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableStartTime(t *time.Time) *ExpertCreate {
	if t != nil {
		ec.SetStartTime(*t)
	}
	return ec
}

// SetEndTime sets the "end_time" field.
func (ec *ExpertCreate) SetEndTime(t time.Time) *ExpertCreate {
	ec.mutation.SetEndTime(t)
	return ec
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableEndTime(t *time.Time) *ExpertCreate {
	if t != nil {
		ec.SetEndTime(*t)
	}
	return ec
}

// SetIsOnline sets the "is_online" field.
func (ec *ExpertCreate) SetIsOnline(b bool) *ExpertCreate {
	ec.mutation.SetIsOnline(b)
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *ExpertCreate) SetCreatedAt(t time.Time) *ExpertCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *ExpertCreate) SetNillableCreatedAt(t *time.Time) *ExpertCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *ExpertCreate) SetID(i int) *ExpertCreate {
	ec.mutation.SetID(i)
	return ec
}

// AddDepartmentIDs adds the "departments" edge to the Department entity by IDs.
func (ec *ExpertCreate) AddDepartmentIDs(ids ...int) *ExpertCreate {
	ec.mutation.AddDepartmentIDs(ids...)
	return ec
}

// AddDepartments adds the "departments" edges to the Department entity.
func (ec *ExpertCreate) AddDepartments(d ...*Department) *ExpertCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ec.AddDepartmentIDs(ids...)
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (ec *ExpertCreate) AddTicketIDs(ids ...int64) *ExpertCreate {
	ec.mutation.AddTicketIDs(ids...)
	return ec
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (ec *ExpertCreate) AddTickets(t ...*Ticket) *ExpertCreate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ec.AddTicketIDs(ids...)
}

// Mutation returns the ExpertMutation object of the builder.
func (ec *ExpertCreate) Mutation() *ExpertMutation {
	return ec.mutation
}

// Save creates the Expert in the database.
func (ec *ExpertCreate) Save(ctx context.Context) (*Expert, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExpertCreate) SaveX(ctx context.Context) *Expert {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExpertCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExpertCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ExpertCreate) defaults() {
	if _, ok := ec.mutation.StartTime(); !ok {
		v := expert.DefaultStartTime()
		ec.mutation.SetStartTime(v)
	}
	if _, ok := ec.mutation.EndTime(); !ok {
		v := expert.DefaultEndTime()
		ec.mutation.SetEndTime(v)
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := expert.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExpertCreate) check() error {
	if _, ok := ec.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "Expert.username"`)}
	}
	if v, ok := ec.mutation.Username(); ok {
		if err := expert.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Expert.username": %w`, err)}
		}
	}
	if _, ok := ec.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "Expert.first_name"`)}
	}
	if v, ok := ec.mutation.FirstName(); ok {
		if err := expert.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Expert.first_name": %w`, err)}
		}
	}
	if _, ok := ec.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "Expert.last_name"`)}
	}
	if v, ok := ec.mutation.LastName(); ok {
		if err := expert.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Expert.last_name": %w`, err)}
		}
	}
	if _, ok := ec.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Expert.start_time"`)}
	}
	if _, ok := ec.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "Expert.end_time"`)}
	}
	if _, ok := ec.mutation.IsOnline(); !ok {
		return &ValidationError{Name: "is_online", err: errors.New(`ent: missing required field "Expert.is_online"`)}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Expert.created_at"`)}
	}
	return nil
}

func (ec *ExpertCreate) sqlSave(ctx context.Context) (*Expert, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExpertCreate) createSpec() (*Expert, *sqlgraph.CreateSpec) {
	var (
		_node = &Expert{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(expert.Table, sqlgraph.NewFieldSpec(expert.FieldID, field.TypeInt))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.Username(); ok {
		_spec.SetField(expert.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := ec.mutation.FirstName(); ok {
		_spec.SetField(expert.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := ec.mutation.LastName(); ok {
		_spec.SetField(expert.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := ec.mutation.StartTime(); ok {
		_spec.SetField(expert.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := ec.mutation.EndTime(); ok {
		_spec.SetField(expert.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := ec.mutation.IsOnline(); ok {
		_spec.SetField(expert.FieldIsOnline, field.TypeBool, value)
		_node.IsOnline = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(expert.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ec.mutation.DepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   expert.DepartmentsTable,
			Columns: expert.DepartmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   expert.TicketsTable,
			Columns: []string{expert.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExpertCreateBulk is the builder for creating many Expert entities in bulk.
type ExpertCreateBulk struct {
	config
	err      error
	builders []*ExpertCreate
}

// Save creates the Expert entities in the database.
func (ecb *ExpertCreateBulk) Save(ctx context.Context) ([]*Expert, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Expert, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExpertMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExpertCreateBulk) SaveX(ctx context.Context) []*Expert {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExpertCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExpertCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
