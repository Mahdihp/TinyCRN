// Code generated by ent, DO NOT EDIT.

package ent

import (
	"TinyCRM/ent/expert"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Expert is the model entity for the Expert schema.
type Expert struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// IsOnline holds the value of the "is_online" field.
	IsOnline bool `json:"is_online,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExpertQuery when eager-loading is set.
	Edges        ExpertEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ExpertEdges holds the relations/edges for other nodes in the graph.
type ExpertEdges struct {
	// Department holds the value of the department edge.
	Department []*Department `json:"department,omitempty"`
	// Tickets holds the value of the tickets edge.
	Tickets []*Ticket `json:"tickets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading.
func (e ExpertEdges) DepartmentOrErr() ([]*Department, error) {
	if e.loadedTypes[0] {
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// TicketsOrErr returns the Tickets value or an error if the edge
// was not loaded in eager-loading.
func (e ExpertEdges) TicketsOrErr() ([]*Ticket, error) {
	if e.loadedTypes[1] {
		return e.Tickets, nil
	}
	return nil, &NotLoadedError{edge: "tickets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Expert) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case expert.FieldIsOnline:
			values[i] = new(sql.NullBool)
		case expert.FieldID:
			values[i] = new(sql.NullInt64)
		case expert.FieldUsername, expert.FieldFirstName, expert.FieldLastName:
			values[i] = new(sql.NullString)
		case expert.FieldStartTime, expert.FieldEndTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Expert fields.
func (e *Expert) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case expert.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case expert.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				e.Username = value.String
			}
		case expert.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				e.FirstName = value.String
			}
		case expert.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				e.LastName = value.String
			}
		case expert.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				e.StartTime = value.Time
			}
		case expert.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				e.EndTime = value.Time
			}
		case expert.FieldIsOnline:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_online", values[i])
			} else if value.Valid {
				e.IsOnline = value.Bool
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Expert.
// This includes values selected through modifiers, order, etc.
func (e *Expert) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryDepartment queries the "department" edge of the Expert entity.
func (e *Expert) QueryDepartment() *DepartmentQuery {
	return NewExpertClient(e.config).QueryDepartment(e)
}

// QueryTickets queries the "tickets" edge of the Expert entity.
func (e *Expert) QueryTickets() *TicketQuery {
	return NewExpertClient(e.config).QueryTickets(e)
}

// Update returns a builder for updating this Expert.
// Note that you need to call Expert.Unwrap() before calling this method if this Expert
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Expert) Update() *ExpertUpdateOne {
	return NewExpertClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Expert entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Expert) Unwrap() *Expert {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Expert is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Expert) String() string {
	var builder strings.Builder
	builder.WriteString("Expert(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("username=")
	builder.WriteString(e.Username)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(e.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(e.LastName)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(e.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(e.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_online=")
	builder.WriteString(fmt.Sprintf("%v", e.IsOnline))
	builder.WriteByte(')')
	return builder.String()
}

// Experts is a parsable slice of Expert.
type Experts []*Expert
