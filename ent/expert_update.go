// Code generated by ent, DO NOT EDIT.

package ent

import (
	"TinyCRM/ent/department"
	"TinyCRM/ent/expert"
	"TinyCRM/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExpertUpdate is the builder for updating Expert entities.
type ExpertUpdate struct {
	config
	hooks    []Hook
	mutation *ExpertMutation
}

// Where appends a list predicates to the ExpertUpdate builder.
func (eu *ExpertUpdate) Where(ps ...predicate.Expert) *ExpertUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUsername sets the "username" field.
func (eu *ExpertUpdate) SetUsername(s string) *ExpertUpdate {
	eu.mutation.SetUsername(s)
	return eu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableUsername(s *string) *ExpertUpdate {
	if s != nil {
		eu.SetUsername(*s)
	}
	return eu
}

// SetFirstName sets the "first_name" field.
func (eu *ExpertUpdate) SetFirstName(s string) *ExpertUpdate {
	eu.mutation.SetFirstName(s)
	return eu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableFirstName(s *string) *ExpertUpdate {
	if s != nil {
		eu.SetFirstName(*s)
	}
	return eu
}

// SetLastName sets the "last_name" field.
func (eu *ExpertUpdate) SetLastName(s string) *ExpertUpdate {
	eu.mutation.SetLastName(s)
	return eu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableLastName(s *string) *ExpertUpdate {
	if s != nil {
		eu.SetLastName(*s)
	}
	return eu
}

// SetStartTime sets the "start_time" field.
func (eu *ExpertUpdate) SetStartTime(t time.Time) *ExpertUpdate {
	eu.mutation.SetStartTime(t)
	return eu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableStartTime(t *time.Time) *ExpertUpdate {
	if t != nil {
		eu.SetStartTime(*t)
	}
	return eu
}

// SetEndTime sets the "end_time" field.
func (eu *ExpertUpdate) SetEndTime(t time.Time) *ExpertUpdate {
	eu.mutation.SetEndTime(t)
	return eu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableEndTime(t *time.Time) *ExpertUpdate {
	if t != nil {
		eu.SetEndTime(*t)
	}
	return eu
}

// SetIsOnline sets the "is_online" field.
func (eu *ExpertUpdate) SetIsOnline(b bool) *ExpertUpdate {
	eu.mutation.SetIsOnline(b)
	return eu
}

// SetNillableIsOnline sets the "is_online" field if the given value is not nil.
func (eu *ExpertUpdate) SetNillableIsOnline(b *bool) *ExpertUpdate {
	if b != nil {
		eu.SetIsOnline(*b)
	}
	return eu
}

// AddDepartmentIDs adds the "department" edge to the Department entity by IDs.
func (eu *ExpertUpdate) AddDepartmentIDs(ids ...int) *ExpertUpdate {
	eu.mutation.AddDepartmentIDs(ids...)
	return eu
}

// AddDepartment adds the "department" edges to the Department entity.
func (eu *ExpertUpdate) AddDepartment(d ...*Department) *ExpertUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddDepartmentIDs(ids...)
}

// Mutation returns the ExpertMutation object of the builder.
func (eu *ExpertUpdate) Mutation() *ExpertMutation {
	return eu.mutation
}

// ClearDepartment clears all "department" edges to the Department entity.
func (eu *ExpertUpdate) ClearDepartment() *ExpertUpdate {
	eu.mutation.ClearDepartment()
	return eu
}

// RemoveDepartmentIDs removes the "department" edge to Department entities by IDs.
func (eu *ExpertUpdate) RemoveDepartmentIDs(ids ...int) *ExpertUpdate {
	eu.mutation.RemoveDepartmentIDs(ids...)
	return eu
}

// RemoveDepartment removes "department" edges to Department entities.
func (eu *ExpertUpdate) RemoveDepartment(d ...*Department) *ExpertUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveDepartmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExpertUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExpertUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExpertUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExpertUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *ExpertUpdate) check() error {
	if v, ok := eu.mutation.Username(); ok {
		if err := expert.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Expert.username": %w`, err)}
		}
	}
	if v, ok := eu.mutation.FirstName(); ok {
		if err := expert.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Expert.first_name": %w`, err)}
		}
	}
	if v, ok := eu.mutation.LastName(); ok {
		if err := expert.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Expert.last_name": %w`, err)}
		}
	}
	return nil
}

func (eu *ExpertUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(expert.Table, expert.Columns, sqlgraph.NewFieldSpec(expert.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Username(); ok {
		_spec.SetField(expert.FieldUsername, field.TypeString, value)
	}
	if value, ok := eu.mutation.FirstName(); ok {
		_spec.SetField(expert.FieldFirstName, field.TypeString, value)
	}
	if value, ok := eu.mutation.LastName(); ok {
		_spec.SetField(expert.FieldLastName, field.TypeString, value)
	}
	if value, ok := eu.mutation.StartTime(); ok {
		_spec.SetField(expert.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := eu.mutation.EndTime(); ok {
		_spec.SetField(expert.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := eu.mutation.IsOnline(); ok {
		_spec.SetField(expert.FieldIsOnline, field.TypeBool, value)
	}
	if eu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   expert.DepartmentTable,
			Columns: expert.DepartmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedDepartmentIDs(); len(nodes) > 0 && !eu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   expert.DepartmentTable,
			Columns: expert.DepartmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   expert.DepartmentTable,
			Columns: expert.DepartmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{expert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExpertUpdateOne is the builder for updating a single Expert entity.
type ExpertUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExpertMutation
}

// SetUsername sets the "username" field.
func (euo *ExpertUpdateOne) SetUsername(s string) *ExpertUpdateOne {
	euo.mutation.SetUsername(s)
	return euo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableUsername(s *string) *ExpertUpdateOne {
	if s != nil {
		euo.SetUsername(*s)
	}
	return euo
}

// SetFirstName sets the "first_name" field.
func (euo *ExpertUpdateOne) SetFirstName(s string) *ExpertUpdateOne {
	euo.mutation.SetFirstName(s)
	return euo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableFirstName(s *string) *ExpertUpdateOne {
	if s != nil {
		euo.SetFirstName(*s)
	}
	return euo
}

// SetLastName sets the "last_name" field.
func (euo *ExpertUpdateOne) SetLastName(s string) *ExpertUpdateOne {
	euo.mutation.SetLastName(s)
	return euo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableLastName(s *string) *ExpertUpdateOne {
	if s != nil {
		euo.SetLastName(*s)
	}
	return euo
}

// SetStartTime sets the "start_time" field.
func (euo *ExpertUpdateOne) SetStartTime(t time.Time) *ExpertUpdateOne {
	euo.mutation.SetStartTime(t)
	return euo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableStartTime(t *time.Time) *ExpertUpdateOne {
	if t != nil {
		euo.SetStartTime(*t)
	}
	return euo
}

// SetEndTime sets the "end_time" field.
func (euo *ExpertUpdateOne) SetEndTime(t time.Time) *ExpertUpdateOne {
	euo.mutation.SetEndTime(t)
	return euo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableEndTime(t *time.Time) *ExpertUpdateOne {
	if t != nil {
		euo.SetEndTime(*t)
	}
	return euo
}

// SetIsOnline sets the "is_online" field.
func (euo *ExpertUpdateOne) SetIsOnline(b bool) *ExpertUpdateOne {
	euo.mutation.SetIsOnline(b)
	return euo
}

// SetNillableIsOnline sets the "is_online" field if the given value is not nil.
func (euo *ExpertUpdateOne) SetNillableIsOnline(b *bool) *ExpertUpdateOne {
	if b != nil {
		euo.SetIsOnline(*b)
	}
	return euo
}

// AddDepartmentIDs adds the "department" edge to the Department entity by IDs.
func (euo *ExpertUpdateOne) AddDepartmentIDs(ids ...int) *ExpertUpdateOne {
	euo.mutation.AddDepartmentIDs(ids...)
	return euo
}

// AddDepartment adds the "department" edges to the Department entity.
func (euo *ExpertUpdateOne) AddDepartment(d ...*Department) *ExpertUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddDepartmentIDs(ids...)
}

// Mutation returns the ExpertMutation object of the builder.
func (euo *ExpertUpdateOne) Mutation() *ExpertMutation {
	return euo.mutation
}

// ClearDepartment clears all "department" edges to the Department entity.
func (euo *ExpertUpdateOne) ClearDepartment() *ExpertUpdateOne {
	euo.mutation.ClearDepartment()
	return euo
}

// RemoveDepartmentIDs removes the "department" edge to Department entities by IDs.
func (euo *ExpertUpdateOne) RemoveDepartmentIDs(ids ...int) *ExpertUpdateOne {
	euo.mutation.RemoveDepartmentIDs(ids...)
	return euo
}

// RemoveDepartment removes "department" edges to Department entities.
func (euo *ExpertUpdateOne) RemoveDepartment(d ...*Department) *ExpertUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveDepartmentIDs(ids...)
}

// Where appends a list predicates to the ExpertUpdate builder.
func (euo *ExpertUpdateOne) Where(ps ...predicate.Expert) *ExpertUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExpertUpdateOne) Select(field string, fields ...string) *ExpertUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Expert entity.
func (euo *ExpertUpdateOne) Save(ctx context.Context) (*Expert, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExpertUpdateOne) SaveX(ctx context.Context) *Expert {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExpertUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExpertUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *ExpertUpdateOne) check() error {
	if v, ok := euo.mutation.Username(); ok {
		if err := expert.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Expert.username": %w`, err)}
		}
	}
	if v, ok := euo.mutation.FirstName(); ok {
		if err := expert.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Expert.first_name": %w`, err)}
		}
	}
	if v, ok := euo.mutation.LastName(); ok {
		if err := expert.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Expert.last_name": %w`, err)}
		}
	}
	return nil
}

func (euo *ExpertUpdateOne) sqlSave(ctx context.Context) (_node *Expert, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(expert.Table, expert.Columns, sqlgraph.NewFieldSpec(expert.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Expert.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, expert.FieldID)
		for _, f := range fields {
			if !expert.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != expert.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Username(); ok {
		_spec.SetField(expert.FieldUsername, field.TypeString, value)
	}
	if value, ok := euo.mutation.FirstName(); ok {
		_spec.SetField(expert.FieldFirstName, field.TypeString, value)
	}
	if value, ok := euo.mutation.LastName(); ok {
		_spec.SetField(expert.FieldLastName, field.TypeString, value)
	}
	if value, ok := euo.mutation.StartTime(); ok {
		_spec.SetField(expert.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := euo.mutation.EndTime(); ok {
		_spec.SetField(expert.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := euo.mutation.IsOnline(); ok {
		_spec.SetField(expert.FieldIsOnline, field.TypeBool, value)
	}
	if euo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   expert.DepartmentTable,
			Columns: expert.DepartmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedDepartmentIDs(); len(nodes) > 0 && !euo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   expert.DepartmentTable,
			Columns: expert.DepartmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   expert.DepartmentTable,
			Columns: expert.DepartmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Expert{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{expert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
