// Code generated by ent, DO NOT EDIT.

package ent

import (
	"TinyCRM/ent/customer"
	"TinyCRM/ent/department"
	"TinyCRM/ent/expert"
	"TinyCRM/ent/ticket"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Ticket is the model entity for the Ticket schema.
type Ticket struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content time.Time `json:"content,omitempty"`
	// Status holds the value of the "status" field.
	Status ticket.Status `json:"status,omitempty"`
	// TicketFileID holds the value of the "ticket_file_id" field.
	TicketFileID *string `json:"ticket_file_id,omitempty"`
	// IsViewed holds the value of the "is_viewed" field.
	IsViewed bool `json:"is_viewed,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TicketQuery when eager-loading is set.
	Edges              TicketEdges `json:"edges"`
	customer_tickets   *int64
	department_tickets *int
	expert_tickets     *int
	selectValues       sql.SelectValues
}

// TicketEdges holds the relations/edges for other nodes in the graph.
type TicketEdges struct {
	// CustomerID holds the value of the customer_id edge.
	CustomerID *Customer `json:"customer_id,omitempty"`
	// ExpertID holds the value of the expert_id edge.
	ExpertID *Expert `json:"expert_id,omitempty"`
	// DepartmentID holds the value of the department_id edge.
	DepartmentID *Department `json:"department_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CustomerIDOrErr returns the CustomerID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) CustomerIDOrErr() (*Customer, error) {
	if e.CustomerID != nil {
		return e.CustomerID, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer_id"}
}

// ExpertIDOrErr returns the ExpertID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) ExpertIDOrErr() (*Expert, error) {
	if e.ExpertID != nil {
		return e.ExpertID, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: expert.Label}
	}
	return nil, &NotLoadedError{edge: "expert_id"}
}

// DepartmentIDOrErr returns the DepartmentID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) DepartmentIDOrErr() (*Department, error) {
	if e.DepartmentID != nil {
		return e.DepartmentID, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: department.Label}
	}
	return nil, &NotLoadedError{edge: "department_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ticket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticket.FieldIsViewed:
			values[i] = new(sql.NullBool)
		case ticket.FieldID:
			values[i] = new(sql.NullInt64)
		case ticket.FieldTitle, ticket.FieldStatus, ticket.FieldTicketFileID:
			values[i] = new(sql.NullString)
		case ticket.FieldContent, ticket.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case ticket.ForeignKeys[0]: // customer_tickets
			values[i] = new(sql.NullInt64)
		case ticket.ForeignKeys[1]: // department_tickets
			values[i] = new(sql.NullInt64)
		case ticket.ForeignKeys[2]: // expert_tickets
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ticket fields.
func (t *Ticket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int64(value.Int64)
		case ticket.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case ticket.FieldContent:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				t.Content = value.Time
			}
		case ticket.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = ticket.Status(value.String)
			}
		case ticket.FieldTicketFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_file_id", values[i])
			} else if value.Valid {
				t.TicketFileID = new(string)
				*t.TicketFileID = value.String
			}
		case ticket.FieldIsViewed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_viewed", values[i])
			} else if value.Valid {
				t.IsViewed = value.Bool
			}
		case ticket.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case ticket.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field customer_tickets", value)
			} else if value.Valid {
				t.customer_tickets = new(int64)
				*t.customer_tickets = int64(value.Int64)
			}
		case ticket.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field department_tickets", value)
			} else if value.Valid {
				t.department_tickets = new(int)
				*t.department_tickets = int(value.Int64)
			}
		case ticket.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field expert_tickets", value)
			} else if value.Valid {
				t.expert_tickets = new(int)
				*t.expert_tickets = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ticket.
// This includes values selected through modifiers, order, etc.
func (t *Ticket) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryCustomerID queries the "customer_id" edge of the Ticket entity.
func (t *Ticket) QueryCustomerID() *CustomerQuery {
	return NewTicketClient(t.config).QueryCustomerID(t)
}

// QueryExpertID queries the "expert_id" edge of the Ticket entity.
func (t *Ticket) QueryExpertID() *ExpertQuery {
	return NewTicketClient(t.config).QueryExpertID(t)
}

// QueryDepartmentID queries the "department_id" edge of the Ticket entity.
func (t *Ticket) QueryDepartmentID() *DepartmentQuery {
	return NewTicketClient(t.config).QueryDepartmentID(t)
}

// Update returns a builder for updating this Ticket.
// Note that you need to call Ticket.Unwrap() before calling this method if this Ticket
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ticket) Update() *TicketUpdateOne {
	return NewTicketClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Ticket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Ticket) Unwrap() *Ticket {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ticket is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ticket) String() string {
	var builder strings.Builder
	builder.WriteString("Ticket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(t.Content.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	if v := t.TicketFileID; v != nil {
		builder.WriteString("ticket_file_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("is_viewed=")
	builder.WriteString(fmt.Sprintf("%v", t.IsViewed))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tickets is a parsable slice of Ticket.
type Tickets []*Ticket
