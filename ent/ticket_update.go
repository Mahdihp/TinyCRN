// Code generated by ent, DO NOT EDIT.

package ent

import (
	"TinyCRM/ent/customer"
	"TinyCRM/ent/department"
	"TinyCRM/ent/expert"
	"TinyCRM/ent/predicate"
	"TinyCRM/ent/ticket"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TicketUpdate is the builder for updating Ticket entities.
type TicketUpdate struct {
	config
	hooks    []Hook
	mutation *TicketMutation
}

// Where appends a list predicates to the TicketUpdate builder.
func (tu *TicketUpdate) Where(ps ...predicate.Ticket) *TicketUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTitle sets the "title" field.
func (tu *TicketUpdate) SetTitle(s string) *TicketUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableTitle(s *string) *TicketUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetContent sets the "content" field.
func (tu *TicketUpdate) SetContent(t time.Time) *TicketUpdate {
	tu.mutation.SetContent(t)
	return tu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableContent(t *time.Time) *TicketUpdate {
	if t != nil {
		tu.SetContent(*t)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TicketUpdate) SetStatus(t ticket.Status) *TicketUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableStatus(t *ticket.Status) *TicketUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetTicketFileID sets the "ticket_file_id" field.
func (tu *TicketUpdate) SetTicketFileID(s string) *TicketUpdate {
	tu.mutation.SetTicketFileID(s)
	return tu
}

// SetNillableTicketFileID sets the "ticket_file_id" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableTicketFileID(s *string) *TicketUpdate {
	if s != nil {
		tu.SetTicketFileID(*s)
	}
	return tu
}

// SetIsViewed sets the "is_viewed" field.
func (tu *TicketUpdate) SetIsViewed(b bool) *TicketUpdate {
	tu.mutation.SetIsViewed(b)
	return tu
}

// SetNillableIsViewed sets the "is_viewed" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableIsViewed(b *bool) *TicketUpdate {
	if b != nil {
		tu.SetIsViewed(*b)
	}
	return tu
}

// SetCustomerIDID sets the "customer_id" edge to the Customer entity by ID.
func (tu *TicketUpdate) SetCustomerIDID(id int64) *TicketUpdate {
	tu.mutation.SetCustomerIDID(id)
	return tu
}

// SetCustomerID sets the "customer_id" edge to the Customer entity.
func (tu *TicketUpdate) SetCustomerID(c *Customer) *TicketUpdate {
	return tu.SetCustomerIDID(c.ID)
}

// SetExpertIDID sets the "expert_id" edge to the Expert entity by ID.
func (tu *TicketUpdate) SetExpertIDID(id int) *TicketUpdate {
	tu.mutation.SetExpertIDID(id)
	return tu
}

// SetExpertID sets the "expert_id" edge to the Expert entity.
func (tu *TicketUpdate) SetExpertID(e *Expert) *TicketUpdate {
	return tu.SetExpertIDID(e.ID)
}

// SetDepartmentIDID sets the "department_id" edge to the Department entity by ID.
func (tu *TicketUpdate) SetDepartmentIDID(id int) *TicketUpdate {
	tu.mutation.SetDepartmentIDID(id)
	return tu
}

// SetDepartmentID sets the "department_id" edge to the Department entity.
func (tu *TicketUpdate) SetDepartmentID(d *Department) *TicketUpdate {
	return tu.SetDepartmentIDID(d.ID)
}

// Mutation returns the TicketMutation object of the builder.
func (tu *TicketUpdate) Mutation() *TicketMutation {
	return tu.mutation
}

// ClearCustomerID clears the "customer_id" edge to the Customer entity.
func (tu *TicketUpdate) ClearCustomerID() *TicketUpdate {
	tu.mutation.ClearCustomerID()
	return tu
}

// ClearExpertID clears the "expert_id" edge to the Expert entity.
func (tu *TicketUpdate) ClearExpertID() *TicketUpdate {
	tu.mutation.ClearExpertID()
	return tu
}

// ClearDepartmentID clears the "department_id" edge to the Department entity.
func (tu *TicketUpdate) ClearDepartmentID() *TicketUpdate {
	tu.mutation.ClearDepartmentID()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TicketUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TicketUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TicketUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TicketUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TicketUpdate) check() error {
	if v, ok := tu.mutation.Title(); ok {
		if err := ticket.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Ticket.title": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := ticket.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Ticket.status": %w`, err)}
		}
	}
	if tu.mutation.CustomerIDCleared() && len(tu.mutation.CustomerIDIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ticket.customer_id"`)
	}
	if tu.mutation.ExpertIDCleared() && len(tu.mutation.ExpertIDIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ticket.expert_id"`)
	}
	if tu.mutation.DepartmentIDCleared() && len(tu.mutation.DepartmentIDIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ticket.department_id"`)
	}
	return nil
}

func (tu *TicketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt64))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(ticket.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Content(); ok {
		_spec.SetField(ticket.FieldContent, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(ticket.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.TicketFileID(); ok {
		_spec.SetField(ticket.FieldTicketFileID, field.TypeString, value)
	}
	if value, ok := tu.mutation.IsViewed(); ok {
		_spec.SetField(ticket.FieldIsViewed, field.TypeBool, value)
	}
	if tu.mutation.CustomerIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.CustomerIDTable,
			Columns: []string{ticket.CustomerIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CustomerIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.CustomerIDTable,
			Columns: []string{ticket.CustomerIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ExpertIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.ExpertIDTable,
			Columns: []string{ticket.ExpertIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expert.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ExpertIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.ExpertIDTable,
			Columns: []string{ticket.ExpertIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expert.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DepartmentIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.DepartmentIDTable,
			Columns: []string{ticket.DepartmentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DepartmentIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.DepartmentIDTable,
			Columns: []string{ticket.DepartmentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TicketUpdateOne is the builder for updating a single Ticket entity.
type TicketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketMutation
}

// SetTitle sets the "title" field.
func (tuo *TicketUpdateOne) SetTitle(s string) *TicketUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableTitle(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetContent sets the "content" field.
func (tuo *TicketUpdateOne) SetContent(t time.Time) *TicketUpdateOne {
	tuo.mutation.SetContent(t)
	return tuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableContent(t *time.Time) *TicketUpdateOne {
	if t != nil {
		tuo.SetContent(*t)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TicketUpdateOne) SetStatus(t ticket.Status) *TicketUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableStatus(t *ticket.Status) *TicketUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetTicketFileID sets the "ticket_file_id" field.
func (tuo *TicketUpdateOne) SetTicketFileID(s string) *TicketUpdateOne {
	tuo.mutation.SetTicketFileID(s)
	return tuo
}

// SetNillableTicketFileID sets the "ticket_file_id" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableTicketFileID(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetTicketFileID(*s)
	}
	return tuo
}

// SetIsViewed sets the "is_viewed" field.
func (tuo *TicketUpdateOne) SetIsViewed(b bool) *TicketUpdateOne {
	tuo.mutation.SetIsViewed(b)
	return tuo
}

// SetNillableIsViewed sets the "is_viewed" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableIsViewed(b *bool) *TicketUpdateOne {
	if b != nil {
		tuo.SetIsViewed(*b)
	}
	return tuo
}

// SetCustomerIDID sets the "customer_id" edge to the Customer entity by ID.
func (tuo *TicketUpdateOne) SetCustomerIDID(id int64) *TicketUpdateOne {
	tuo.mutation.SetCustomerIDID(id)
	return tuo
}

// SetCustomerID sets the "customer_id" edge to the Customer entity.
func (tuo *TicketUpdateOne) SetCustomerID(c *Customer) *TicketUpdateOne {
	return tuo.SetCustomerIDID(c.ID)
}

// SetExpertIDID sets the "expert_id" edge to the Expert entity by ID.
func (tuo *TicketUpdateOne) SetExpertIDID(id int) *TicketUpdateOne {
	tuo.mutation.SetExpertIDID(id)
	return tuo
}

// SetExpertID sets the "expert_id" edge to the Expert entity.
func (tuo *TicketUpdateOne) SetExpertID(e *Expert) *TicketUpdateOne {
	return tuo.SetExpertIDID(e.ID)
}

// SetDepartmentIDID sets the "department_id" edge to the Department entity by ID.
func (tuo *TicketUpdateOne) SetDepartmentIDID(id int) *TicketUpdateOne {
	tuo.mutation.SetDepartmentIDID(id)
	return tuo
}

// SetDepartmentID sets the "department_id" edge to the Department entity.
func (tuo *TicketUpdateOne) SetDepartmentID(d *Department) *TicketUpdateOne {
	return tuo.SetDepartmentIDID(d.ID)
}

// Mutation returns the TicketMutation object of the builder.
func (tuo *TicketUpdateOne) Mutation() *TicketMutation {
	return tuo.mutation
}

// ClearCustomerID clears the "customer_id" edge to the Customer entity.
func (tuo *TicketUpdateOne) ClearCustomerID() *TicketUpdateOne {
	tuo.mutation.ClearCustomerID()
	return tuo
}

// ClearExpertID clears the "expert_id" edge to the Expert entity.
func (tuo *TicketUpdateOne) ClearExpertID() *TicketUpdateOne {
	tuo.mutation.ClearExpertID()
	return tuo
}

// ClearDepartmentID clears the "department_id" edge to the Department entity.
func (tuo *TicketUpdateOne) ClearDepartmentID() *TicketUpdateOne {
	tuo.mutation.ClearDepartmentID()
	return tuo
}

// Where appends a list predicates to the TicketUpdate builder.
func (tuo *TicketUpdateOne) Where(ps ...predicate.Ticket) *TicketUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TicketUpdateOne) Select(field string, fields ...string) *TicketUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Ticket entity.
func (tuo *TicketUpdateOne) Save(ctx context.Context) (*Ticket, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TicketUpdateOne) SaveX(ctx context.Context) *Ticket {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TicketUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TicketUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TicketUpdateOne) check() error {
	if v, ok := tuo.mutation.Title(); ok {
		if err := ticket.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Ticket.title": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := ticket.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Ticket.status": %w`, err)}
		}
	}
	if tuo.mutation.CustomerIDCleared() && len(tuo.mutation.CustomerIDIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ticket.customer_id"`)
	}
	if tuo.mutation.ExpertIDCleared() && len(tuo.mutation.ExpertIDIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ticket.expert_id"`)
	}
	if tuo.mutation.DepartmentIDCleared() && len(tuo.mutation.DepartmentIDIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ticket.department_id"`)
	}
	return nil
}

func (tuo *TicketUpdateOne) sqlSave(ctx context.Context) (_node *Ticket, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt64))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ticket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticket.FieldID)
		for _, f := range fields {
			if !ticket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ticket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(ticket.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Content(); ok {
		_spec.SetField(ticket.FieldContent, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(ticket.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.TicketFileID(); ok {
		_spec.SetField(ticket.FieldTicketFileID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.IsViewed(); ok {
		_spec.SetField(ticket.FieldIsViewed, field.TypeBool, value)
	}
	if tuo.mutation.CustomerIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.CustomerIDTable,
			Columns: []string{ticket.CustomerIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CustomerIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.CustomerIDTable,
			Columns: []string{ticket.CustomerIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ExpertIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.ExpertIDTable,
			Columns: []string{ticket.ExpertIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expert.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ExpertIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.ExpertIDTable,
			Columns: []string{ticket.ExpertIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expert.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DepartmentIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.DepartmentIDTable,
			Columns: []string{ticket.DepartmentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DepartmentIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.DepartmentIDTable,
			Columns: []string{ticket.DepartmentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ticket{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
